<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2017\community\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="15.0">
 <Targets>
  <Target Name="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\bin\Debug\SEIDR.dll">
   <Modules>
    <Module Name="seidr.dll">
     <Namespaces>
      <Namespace Name="SEIDR.DataBase">
       <Types>
        <Type Name="DatabaseConnection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RunCommand(System.Data.SqlClient.SqlCommand,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseConnection.cs" Line="306">Object 'c' can be disposed more than once in method 'DatabaseConnection.RunCommand(SqlCommand, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 306</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DatabaseManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(SEIDR.DataBase.DatabaseManagerHelperModel,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="382">Object 'c' can be disposed more than once in method 'DatabaseManager.Execute(DatabaseManagerHelperModel, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 382</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="296">The query string passed to 'SqlCommand.SqlCommand(string)' in 'DatabaseManager.Execute(DatabaseManagerHelperModel, bool)' could contain the following variables 'this._Schema', 'i.Schema', 'i.Procedure'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="348">The query string passed to 'SqlCommand.SqlCommand(string)' in 'DatabaseManager.Execute(DatabaseManagerHelperModel, bool)' could contain the following variables 'this._Schema', 'i.Schema', 'i.Procedure'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="419">Object 'c' can be disposed more than once in method 'DatabaseManager.Execute(string, object)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 419</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="391">The query string passed to 'SqlCommand.SqlCommand(string)' in 'DatabaseManager.Execute(string, object)' could contain the following variables 'QualifiedProcedureName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteNonQuery(SEIDR.DataBase.DatabaseManagerHelperModel,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="525">Object 'c' can be disposed more than once in method 'DatabaseManager.ExecuteNonQuery(DatabaseManagerHelperModel, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 525</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="441">The query string passed to 'SqlCommand.SqlCommand(string)' in 'DatabaseManager.ExecuteNonQuery(DatabaseManagerHelperModel, bool)' could contain the following variables 'this._Schema', 'i.Schema', 'i.Procedure'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="490">The query string passed to 'SqlCommand.SqlCommand(string)' in 'DatabaseManager.ExecuteNonQuery(DatabaseManagerHelperModel, bool)' could contain the following variables 'this._Schema', 'i.Schema', 'i.Procedure'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteNonQuery(System.String,System.Int32&amp;,System.Object,System.Nullable`1&lt;System.Boolean&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="573">Object 'c' can be disposed more than once in method 'DatabaseManager.ExecuteNonQuery(string, out int, object, bool?)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 573</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="546">The query string passed to 'SqlCommand.SqlCommand(string)' in 'DatabaseManager.ExecuteNonQuery(string, out int, object, bool?)' could contain the following variables 'QualifiedProcedureName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteText(SEIDR.DataBase.DatabaseManagerHelperModel,System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="691">Object 'c' can be disposed more than once in method 'DatabaseManager.ExecuteText(DatabaseManagerHelperModel, string, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 691</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="663">The query string passed to 'SqlCommand.SqlCommand(string)' in 'DatabaseManager.ExecuteText(DatabaseManagerHelperModel, string, bool)' could contain the following variables 'CommandText'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="696">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'DatabaseManager.ExecuteText(DatabaseManagerHelperModel, string, bool)' could contain the following variables 'CommandText'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteText(System.String,System.Nullable`1&lt;System.Boolean&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="624">The query string passed to 'SqlCommand.SqlCommand(string)' in 'DatabaseManager.ExecuteText(string, bool?)' could contain the following variables 'CommandText'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteTextNonQuery(System.String,System.Nullable`1&lt;System.Boolean&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="592">The query string passed to 'SqlCommand.SqlCommand(string)' in 'DatabaseManager.ExecuteTextNonQuery(string, bool?)' could contain the following variables 'CommandText'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectSingle`1(System.Object,System.String,System.String,System.String[],System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="760">The query string passed to 'SqlCommand.SqlCommand(string)' in 'DatabaseManager.SelectSingle&lt;RT&gt;(object, string, string, string[], bool)' could contain the following variables 'this._Schema', 'Schema', 'this.CheckSuffix(string.Format(this.SelectRowFormat, t.Name), suffix)'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectWithKey(System.String,System.Object,System.String,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="911">Object 'conn' can be disposed more than once in method 'DatabaseManager.SelectWithKey(string, object, string, int, int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 911</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManager.cs" Line="902">The query string passed to 'SqlCommand.CommandText.set(string)' in 'DatabaseManager.SelectWithKey(string, object, string, int, int)' could contain the following variables 'sb'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DatabaseManagerHelperModel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'DatabaseManagerHelperModel' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\DataBase" File="DatabaseManagerHelperModel.cs" Line="358">Modify 'DatabaseManagerHelperModel.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="SEIDR.Doc">
       <Types>
        <Type Name="ColumnOverflowException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ColumnOverflowException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="DelimitedDocumentWriter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'DelimitedDocumentWriter' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\Doc" File="DelimitedDocumentWriter.cs" Line="140">Modify 'DelimitedDocumentWriter.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DelimitedIndex" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'DelimitedIndex' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\Doc" File="DelimitedIndex.cs" Line="197">Modify 'DelimitedIndex.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DelimitedRecord" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SEIDR.Doc.IRecord.Item[System.Int32]" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#SEIDR.Doc.IRecord.set_Item(System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\Doc" File="DelimitedRecord.cs" Line="246">Make 'DelimitedRecord' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IRecord.this.set(int, string)' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SEIDR.Doc.IRecord.Item[System.String,System.String]" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#SEIDR.Doc.IRecord.set_Item(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\Doc" File="DelimitedRecord.cs" Line="247">Make 'DelimitedRecord' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IRecord.this.set(string, string, string)' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="DocReader" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(SEIDR.Doc.DocMetaData)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\Doc" File="DocReader.cs" Line="243">'DocReader.DocReader(DocMetaData)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;DocReader..ctor(DocMetaData)&#xD;&#xA;DocReader.setupStream():Void&#xD;&#xA;DocReader.Dispose(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.String,System.String,System.Nullable`1&lt;System.Char&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\Doc" File="DocReader.cs" Line="243">'DocReader.DocReader(string, string, string, char?)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;DocReader..ctor(String, String, String, Nullable&lt;Char&gt;)&#xD;&#xA;DocReader.setupStream():Void&#xD;&#xA;DocReader.Dispose(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DocRecord" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="Breaking">
             <Issue Name="NoAllowedExceptions" Certainty="90" Level="Warning" Path="C:\Users\rlanger\Dropbox\DS_Loader\SEIDR\Doc" File="DocRecord.cs" Line="224">'DocRecord.ToString()' creates an exception of type 'InvalidOperationException'. Exceptions should not be raised in this type of method. If this exception instance might be raised, change this method's logic so it no longer raises an exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MissingColumnException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'MissingColumnException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Processor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2017-12-15 08:34:58Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'Processor' because it creates members of the following IDisposable types: 'FileReader'. If 'Processor' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 911</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="NoAllowedExceptions">{0} creates an exception of type {1}. Exceptions should not be raised in this type of method. If this exception instance might be raised, change this method's logic so it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182153.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="15.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
